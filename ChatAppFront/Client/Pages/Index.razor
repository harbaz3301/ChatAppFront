@page "/"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>this is chat</PageTitle>
<h3>my chat</h3>

@if (!IsConnected)
{
    <div class="input-group" >

        <input @bind="user" class="form-control" placeholder="username">
        <button class="btn btn-primary form-control-append" @onclick="Connect" >connect</button>
    </div>
}
else
{
    <textarea style="width: 100%;height: 500px">
        @messages
    </textarea>
    <div class="input-group">
    <input @bind-value="message" 
        @bind-value:event="oninput"
        @onkeyup="HandleInput"
        class="form-controls" 
    >
    <button class="btn btn-primary form-control-append" @onclick="Send" disabled="@(!IsConnected)" > Send </button>
    </div>
}

@code{
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string user = string.Empty;
    private string message = string.Empty;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={user}"))
        .Build();

        hubConnection.On<string, string>("GetThatMessage", (userd, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(userd) ? "" : userd + ": ")}{message}";
            messages += msg + "\n";
            //JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        }
        );
        await hubConnection.StartAsync();
    }


    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("sendMessagetoChat",user ,message);
            message = string.Empty;
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}